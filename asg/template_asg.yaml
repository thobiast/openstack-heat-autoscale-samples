heat_template_version: 2021-04-16
description: >
  An example of Instance CPU Auto Scaling.
  This sample stack does not create Load Balancer resources. However, if the
  variable "lb_pool" is specified, instances will be added to or removed from
  the Load Balancer pool defined by that variable as needed.
parameters:
  image:
    type: string
    description: The ID or name of the image to boot with
  flavor:
    type: string
    description: The ID or name of the flavor to boot onto
  key_name:
    type: string
    description: Name of keypair to inject into the server
  subnet:
    type: string
    description: Subnet name or ID of the servers
  security_groups:
    type: comma_delimited_list
    description: List of security group names or IDs
    default: []
  tags:
    type: comma_delimited_list
    description: Tags from the server
    default: []
  user_data:
    type: string
    description: Instance user data
  desired_capacity:
    type: number
    description: Desired initial number of resources
    default: 1
  min_size:
    type: number
    description: Minimum number of resources in the group
    default: 1
  max_size:
    type: number
    description: Maximum number of resources in the group
    default: 6
  rolling_updates_max_batch_size:
    type: number
    description: The maximum number of resources to replace at once for this scaling group
    default: 1
  rolling_updates_min_in_service:
    type: number
    description: The minimum number of resources in service while rolling updates are being executed for this scaling group
    default: 1
  rolling_updates_pause_time:
    type: number
    description: The number of seconds to wait between batches of updates for this scaling group
    default: 0
  cooldown:
    type: number
    description: Cooldown period, in seconds
    default: 600
  evaluation_periods:
    type: number
    description: Number of periods to evaluate over
    default: 3
  metric_name:
    type: string
    description: Metric name watched by the alarm. If empty it does no automatic scaling.
    default: cpu
  metric_aggregation_method:
    type: string
    description: The aggregation method to compare to the threshold.
    default: rate:mean
  metric_granularity:
    type: number
    description: The time range in seconds.
    default: 300
  cpu_threshold_high:
    type: number
    description: CPU Threshold to evaluate against to scale up
  cpu_threshold_low:
    type: number
    description: CPU Threshold to evaluate against to scale down
  lb_pool:
    type: string
    description: Name or ID of the load balancing pool
    default: ""
  lb_member_port:
    type: number
    description: Port on which the pool member listens for requests or connections
    default: 80

conditions:
  add_to_pool:
    not:
      equals:
        - get_param: lb_pool
        - ""

resources:
  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      cooldown: {get_param: cooldown}
      desired_capacity: {get_param: desired_capacity}
      max_size: {get_param: max_size}
      min_size: {get_param: min_size}
      rolling_updates:
        max_batch_size: {get_param: rolling_updates_max_batch_size}
        min_in_service: {get_param: rolling_updates_min_in_service}
        pause_time: {get_param: rolling_updates_pause_time}
      resource:
        type: template_server.yaml
        properties:
          flavor: {get_param: flavor}
          image: {get_param: image}
          key_name: {get_param: key_name}
          security_groups: {get_param: security_groups}
          subnet: {get_param: subnet}
          user_data_format: RAW
          user_data: {get_param: user_data}
          tags: {get_param: tags}
          lb_pool: {get_param: lb_pool}
          lb_member_port: {get_param: lb_member_port}
          metadata: {"metering.server_group": {get_param: "OS::stack_id"},
                     "stack_id": {get_param: "OS::stack_id"},
                     "stack_name": {get_param: "OS::stack_name"}}

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: {get_param: cooldown}
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: {get_param: cooldown}
      scaling_adjustment: -1

  alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if metric > cpu_threshold_high
      metric: {get_param: metric_name}
      aggregation_method: {get_param: metric_aggregation_method}
      granularity: {get_param: metric_granularity}
      evaluation_periods: {get_param: evaluation_periods}
      threshold: {get_param: cpu_threshold_high}
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [scale_up_policy, signal_url]}
      query:
        str_replace:
          template: '{"=": {"server_group": "stack_id"}}'
          params:
            stack_id: {get_param: "OS::stack_id"}

  alarm_low:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale down if metric < cpu_threshold_low
      metric: {get_param: metric_name}
      aggregation_method: {get_param: metric_aggregation_method}
      granularity: {get_param: metric_granularity}
      evaluation_periods: {get_param: evaluation_periods}
      threshold: {get_param: cpu_threshold_low}
      resource_type: instance
      comparison_operator: lt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [scale_down_policy, signal_url]}
      query:
        str_replace:
          template: '{"=": {"server_group": "stack_id"}}'
          params:
            stack_id: {get_param: "OS::stack_id"}

outputs:
  stack_id:
    description: Stack ID
    value: {get_resource: asg}

  scale_up_url:
    description: This URL is the webhook to scale up the autoscaling group.
    value: {get_attr: [scale_up_policy, alarm_url]}

  scale_down_url:
    description: This URL is the webhook to scale down the autoscaling group.
    value: {get_attr: [scale_down_policy, alarm_url]}

  asg_size:
    description: This is the current size of the auto scaling group.
    value: {get_attr: [asg, current_size]}

  server_ip:
    description: A list of server IPs created by the stack.
    value: {get_attr: [asg, outputs_list, server_ip]}

  server_name:
    description: A list of server names created by the stack.
    value: {get_attr: [asg, outputs_list, server_name]}

  lb_member:
    description: Load balancer member details.
    value: {get_attr: [asg, outputs_list, lb_member]}
    condition: add_to_pool

  metric_query:
    description: This query retrieves statistics for CPU usage measurements.
    value:
      str_replace:
        params:
          stackval:
            get_param: OS::stack_id
        template: 'openstack metric aggregates --resource-type instance --sort-column
          timestamp ''(metric cpu rate:mean)'' server_group=stackval'

  metric_query_pct:
    description: >
      This is a query for statistics on the CPU usage measurements, with the values
      calculated as percentages. It is just an example with a flavor with 2 vCPUs.
      Please update number '2' to match your flavor configuration.
    value:
      str_replace:
        params:
          stackval:
            get_param: OS::stack_id
          metric_granularity:
            get_param: metric_granularity
        template: 'openstack metric aggregates --resource-type instance
          --sort-column timestamp
          ''(/ (* (/ (/ (metric cpu rate:mean) 1000000000) metric_granularity) 100) 2)''
          server_group=stackval'

  metric_agg_query_pct:
    description: >
      This query retrieves the CPU usage statistics in percentage, aggregated
      across all instances.
      It is just an example with a flavor with 2 vCPUs.
      Please update number '2' to match your flavor configuration.
    value:
      str_replace:
        params:
          stackval:
            get_param: OS::stack_id
          metric_granularity:
            get_param: metric_granularity
        template: 'openstack metric aggregates --resource-type instance
          --sort-column timestamp
          ''(aggregate mean (/ (* (/ (/ (metric cpu rate:mean) 1000000000) metric_granularity) 100) 2)))''
          server_group=stackval'
